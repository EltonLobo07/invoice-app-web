import type { Metadata } from "next";
import "./globals.css";
import { League_Spartan } from "next/font/google";
import { classJoin } from "@/utils/general";
import { cookies } from "next/headers";
import {
  DARK_THEME_CLASS_NAME,
  IS_DARK_THEME_COOKIE_NAME,
  USER_JWT_COOKIE_NAME,
} from "@/constants/general";
import jwt from "jsonwebtoken";
import * as v from "valibot";
import "dotenv/config";
import { type User, UserSchema } from "@/schemas";
import { StoreProvider } from "@/providers/StoreProvider";
import { GlobalToast } from "@/components/toast";
import HolyLoader from "holy-loader";

const leagueSpartan = League_Spartan({
  subsets: ["latin"],
  weight: "variable",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cookieStore = await cookies();
  const isDarkTheme =
    cookieStore.get(IS_DARK_THEME_COOKIE_NAME)?.value === "true";
  const userJwt = cookieStore.get(USER_JWT_COOKIE_NAME)?.value ?? null;
  let user: User | null = null;
  try {
    if (userJwt !== null) {
      user = v.parse(UserSchema, jwt.verify(userJwt, process.env.JWT_SECRET!));
    }
  } catch (error) {
    console.error(error);
  }

  return (
    <html
      lang="en"
      className={classJoin(
        leagueSpartan.className,
        isDarkTheme && DARK_THEME_CLASS_NAME,
        "h-full overflow-auto"
      )}
    >
      <body
        className={classJoin(
          "antialiased",
          "font-league-spartan",
          "relative",
          "h-full",
          "bg-ds-11 dark:bg-ds-12",
          "text-black dark:text-white"
        )}
      >
        <HolyLoader color="var(--color-ds-1)" />
        <h1 className="sr-only">invoice application</h1>
        <StoreProvider initialIsDarkTheme={isDarkTheme} initialUser={user}>
          {children}
          <GlobalToast />
        </StoreProvider>
      </body>
    </html>
  );
}
